// Changing the requirement of output from "the bottom row" to the "rows of lights as whole"

# include <cstdio>
# include <iostream>
# include <vector>
# include <cstring>
# define MAX 10005

using namespace std;

int row;

int col;

int lights[MAX][MAX];

int origin[MAX][MAX];

int cnt = 0;

bool pat = false;

vector<string> x;

bool brutal(string input)
{
    for (int i = 0; i < x.size(); ++ i)
        if (input.compare(x[i]) == 0)
            return false;
    
    return true;
}

int main()
{
    memset(lights, 0, sizeof(lights));
    memset(origin, 0, sizeof(origin));
    
    cin >> row;
    cin >> col;
    
    for (int i = row; i >= 1; -- i)
    {
        for (int j = 1; j <= col; ++ j)
        {
            cin >> lights[i][j];
            origin[i][j] = lights[i][j];
        }
    }
    
    do
    {
        string newString = "";
        pat = true;
        
        for (int i = row - 1; i >= 1; -- i)
        {
            for (int j = 1; j <= col; ++ j)
            {
                if (lights[i + 1][j] != lights[i][j])
                    lights[i][j] = 1;
                else
                    lights[i][j] = 0;
                if (lights[i][j] != origin[i][j])
                    pat = false;
                newString += to_string(lights[i][j]);
            }
        }
        
        if (brutal(newString))
        {
            ++ cnt;
            x.push_back(newString);
        }
    } while (!pat);
    
    cout << cnt << endl;
    return 0;
}
